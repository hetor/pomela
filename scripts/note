/bin/sh (已經被 /bin/bash 所取代)
/bin/bash (就是 Linux 預設的 shell)
/bin/tcsh (整合 C Shell ，提供更多的功能)
/bin/csh (已經被 /bin/tcsh 所取代)

利用sh或./执行script是在bash子进程中执行的，所以父进程看不见脚本的变量。
利用source执行script是在bash父进程中执行的，所以父进程看得见脚本的变量。

env, set, export(是变量变成环境变量), locale, history, read, declare/typeset, ulimit, alias/unalias, type, stty, tee, col, paste, expand, spliti(文件分割), xargs(参数代换)
$(指令), `指令`

数组: 
var[1]="small min"
var[2]="big min"
var[3]="nice min"
echo "${var[1]}, ${var[2]}, ${var[3]}"

路径与指令搜寻顺序:
1.以相对/绝对路径执行指令，例如『 /bin/ls 』或『 ./ls 』；
2.由alias 找到该指令来执行；
3.由bash 内建的(builtin) 指令来执行；
4.透过$PATH 这个变数的顺序搜寻到的第一个指令来执行。
可以使用type -a查看

登入提示：/etc/issue, /etc/motd
自定义shell终端提示符: 修改环境变量：PS1

login shell：取得bash 时需要完整的登入流程的，就称为login shell。举例来说，你要由tty1 ~ tty6 登入，需要输入使用者的帐号与密码，此时取得的bash 就称为『 login shell 』啰；
1.整体环境设定档：/etc/profile(login shell才会读)：这是系统整体的设定，你最好不要修改这个档案；
2.个人环境设定档：~/.bash_profile(login shell才会读) 或~/.bash_login 或~/.profile：属于使用者个人设定，你要改自己的资料，就写入这里！

non-login shell：取得bash 介面的方法不需要重复登入的举动，举例来说，(1)你以X window 登入Linux 后， 再以X 的图形化介面启动终端机，此时那个终端介面并没有需要再次的输入帐号与密码，那个bash 的环境就称为non-login shell了。(2)你在原本的bash 环境下再次下达bash 这个指令，同样的也没有输入帐号密码， 那第二个bash (子程序) 也是non-login shell 。
